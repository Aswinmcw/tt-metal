---
test-list:
  # SANITY
  datacopy:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 32, 32]
      interval: 32
      num-shapes: 1
      num-samples: 1
    datagen:
      function: gen_rand
      dtype: bfloat16
      args:
        low: -100
        high: 100
    comparison:
      function: comp_equal
    output-file: all_op_sweep.csv
  # ELTWISE UNARY
  eltwise-exp:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand
      args:
        low: -5
        high: 5
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  eltwise-recip:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand_symmetric
      args:
        low: 1
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  eltwise-sqrt:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand
      args:
        low: 0
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  eltwise-gelu:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  eltwise-relu:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  eltwise-sigmoid:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  eltwise-log:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand
      args:
        low: 1
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  eltwise-tanh:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  # ELTWISE BINARY
  eltwise-add:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  eltwise-sub:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  eltwise-mul:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  # MATMUL
  matmul:
    shape:
      start-shape:
        - [1, 1, 32, 32]
        - [1, 1, 32, 32]
      end-shape:
        - [1, 1, 2048, 2048]
        - [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
      method: matmul
      bcast-batch: True
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  bmm:
    shape:
      start-shape:
        - [1, 1, 32, 32]
        - [1, 1, 32, 32]
      end-shape:
        - [1, 1, 2048, 2048]
        - [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
      method: matmul
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  # BROADCAST
  bcast-add-h:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
      method: bcast_h
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  bcast-add-w:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
      method: bcast_w
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  bcast-add-hw:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
      method: bcast_hw
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  bcast-sub-h:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
      method: bcast_h
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  bcast-sub-w:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
      method: bcast_w
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  bcast-sub-hw:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
      method: bcast_hw
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  bcast-mul-h:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
      method: bcast_h
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  bcast-mul-w:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
      method: bcast_w
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  bcast-mul-hw:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 2
      num-samples: 10
      method: bcast_hw
    datagen:
      function: gen_rand
      args:
        low: -100
        high: 100
    comparison:
      function: comp_pcc
    output-file: all_op_sweep.csv
  # REDUCE
  reduce-max-h:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand_along_dim
      dtype: bfloat16
      args:
        low: -100
        high: 100
        dim: -2
    comparison:
      function: comp_equal
    output-file: all_op_sweep.csv
  reduce-max-w:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand_along_dim
      dtype: bfloat16
      args:
        low: -100
        high: 100
        dim: -1
    comparison:
      function: comp_equal
    output-file: all_op_sweep.csv
  reduce-max-hw:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand
      dtype: bfloat16
      args:
        low: -100
        high: 100
    comparison:
      function: comp_equal
    output-file: all_op_sweep.csv
  reduce-sum-h:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_scaled_dirichlet_along_dim
      args:
        start: 1
        step: 1
        max: 1
        dim: -2
    comparison:
      function: comp_allclose
      args:
        rtol: 0
        atol: 0.3
    output-file: all_op_sweep.csv
  reduce-sum-w:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_scaled_dirichlet_along_dim
      args:
        start: 1
        step: 1
        max: 1
        dim: -1
    comparison:
      function: comp_allclose
      args:
        rtol: 0
        atol: 0.3
    output-file: all_op_sweep.csv
  reduce-sum-hw:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_scaled_dirichlet_per_tile
      args:
        start: 1
        step: 1
        max: 1
    comparison:
      function: comp_allclose
      args:
        rtol: 0
        atol: 0.3
    output-file: all_op_sweep.csv
  # TRANSPOSE
  transpose-wh:
    shape:
      start-shape: [1, 1, 32, 32]
      end-shape: [1, 1, 2048, 2048]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand
      dtype: bfloat16
      args:
        low: -100
        high: 100
    comparison:
      function: comp_equal
    output-file: all_op_sweep.csv
  transpose-hc:
    shape:
      start-shape: [1, 32, 32, 32]
      end-shape: [1, 2048, 2048, 32]
      interval: 32
      num-shapes: 1
      num-samples: 10
    datagen:
      function: gen_rand
      dtype: bfloat16
      args:
        low: -100
        high: 100
    comparison:
      function: comp_equal
    output-file: all_op_sweep.csv
